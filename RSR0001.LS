/PROG  RSR0001
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "DPTZ";
PROG_SIZE	= 7106;
CREATE		= DATE 22-10-22  TIME 15:36:10;
MODIFIED	= DATE 23-01-30  TIME 15:52:06;
FILE_NAME	= ;
VERSION		= 0;
LINE_COUNT	= 376;
MEMORY_SIZE	= 7618;
PROTECT		= READ_WRITE;
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= 1,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
/APPL
/MN
   1:  CALL FHOME    ;
   2:  !Calculate-Positon-Succeed ;
   3:  WAIT R[59]=7    ;
   4:   ;
   5:  !JumpEixtForLoop ;
   6:  LBL[13] ;
   7:  CALL FRESET_DATA    ;
   8:  !Reset-Data-Succeed ;
   9:  WAIT R[59]=1    ;
  10:  !PositonHomeReady ;
  11:L PR[1] 2500mm/sec FINE    ;
  12:  CALL FRESET_MEMORY    ;
  13:  MESSAGE[WaitSelcet Left Or Righ] ;
  14:  GO[57]=0 ;
  15:  !Send-Runtime-To-Plc ;
  16:  GO[58]=R[998] ;
  17:  WAIT (DI[3]=ON OR DI[13]=ON OR DI[17]=ON)    ;
  18:   ;
  19:  IF (DI[17]=ON) THEN ;
  20:  CALL FSERVISE    ;
  21:  !Service-Robot-Succeed ;
  22:  WAIT R[59]=2    ;
  23:  JMP LBL[13] ;
  24:  ENDIF ;
  25:   ;
  26:  IF (DI[3]=ON) THEN ;
  27:  R[81]=GI[51]-GI[53]    ;
  28:  R[82]=1    ;
  29:  PR[4]=PR[3]    ;
  30:  ENDIF ;
  31:  IF (DI[13]=ON) THEN ;
  32:  R[81]=GI[52]-GI[54]    ;
  33:  R[82]=2    ;
  34:  PR[4]=PR[2]    ;
  35:  ENDIF ;
  36:   ;
  37:  !WhileLoop No 1 ;
  38:  LBL[20] ;
  39:   ;
  40:  !X-LiftUpFirstRun ;
  41:  DO[11]=PULSE,2.0sec ;
  42:   ;
  43:  !MoveSelect ;
  44:L PR[4] 2500mm/sec FINE    ;
  45:   ;
  46:  !WhileLoop No 2 ;
  47:  WAIT R[81]>0    ;
  48:   ;
  49:  !SettingSpeed 100 % ;
  50:  OVERRIDE=R[97] ;
  51:   ;
  52:  !DELETE RESGESTER ;
  53:  IF R[81]<=8,CALL FRESET_MEMORY ;
  54:   ;
  55:  !Wait X-left Up ;
  56:  GO[57]=6 ;
  57:  WAIT ((DI[4]=ON) OR (R[61]=1 OR R[89]=1))    ;
  58:   ;
  59:  !ExitBacuaseStopRun ;
  60:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
  61:   ;
  62:  IF (R[187]=1 AND R[188]=1) THEN ;
  63:   ;
  64:  CALL FREAD_MEMORY    ;
  65:  !Read-Positon-To-Register ;
  66:  WAIT R[59]=3    ;
  67:   ;
  68:  ELSE ;
  69:   ;
  70:  FOR R[51]=7 TO 44 ;
  71:  R[R[51]]=0    ;
  72:  ENDFOR ;
  73:  LBL[3] ;
  74:  GO[57]=7 ;
  75:   ;
  76:  //MESSAGE[ST CAM] ;
  77:  DO[101]=OFF ;
  78:  DO[102]=OFF ;
  79:  DO[103]=OFF ;
  80:  DO[104]=OFF ;
  81:   ;
  82:  //CALL FRAMDOM    ;
  83:  //WAIT R[59]=8    ;
  84:  //GO[45]=R[116] ;
  85:   ;
  86:  !SendOutputTrikCamera ;
  87:  IF (R[82]=1) THEN ;
  88:  IF (DI[11]=ON) THEN ;
  89:  DO[103]=ON ;
  90:  ELSE ;
  91:  DO[101]=ON ;
  92:  ENDIF ;
  93:  ENDIF ;
  94:  IF (R[82]=2) THEN ;
  95:  IF (DI[11]=ON) THEN ;
  96:  DO[104]=ON ;
  97:  ELSE ;
  98:  DO[102]=ON ;
  99:  ENDIF ;
 100:  ENDIF ;
 101:   ;
 102:  !WaitCameraTick OK ;
 103:  //MESSAGE[Wait Tick Camera] ;
 104:  GO[57]=1 ;
 105:  WAIT ((DI[101]=ON) OR (R[61]=1 OR R[89]=1))    ;
 106:   ;
 107:  DO[101]=OFF ;
 108:  DO[102]=OFF ;
 109:  DO[103]=OFF ;
 110:  DO[104]=OFF ;
 111:  !Re-Check-Rendom ;
 112:  //IF GI[45]<>R[116],JMP LBL[20] ;
 113:   ;
 114:  !ExitBacuaseStopRun ;
 115:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
 116:   ;
 117:  //MESSAGE[Receive DI[101] ] ;
 118:  !CounterPosition 1-8 ;
 119:  !GI[3] = CounterCamera 1-8 ;
 120:  R[3]=GI[3]    ;
 121:   ;
 122:  !7-44  ;
 123:  !7-38 PositonMove ;
 124:  !39-44 Positon Min-Max ;
 125:  //R[51]=7    ;
 126:   ;
 127:  ![R]102 - 109  On/Off Vel Cam ;
 128:  //R[110]=102    ;
 129:   ;
 130:  FOR R[111]=102 TO 109 ;
 131:  IF (DI[R[111]]=ON) THEN ;
 132:  !On G1 Off G2 ;
 133:  R[R[111]]=1    ;
 134:  ELSE ;
 135:  !On G1 , G2 ;
 136:  R[R[111]]=2    ;
 137:  ENDIF ;
 138:  //R[110]=R[110]+1    ;
 139:  ENDFOR ;
 140:   ;
 141:  !SavePosition ;
 142:   ;
 143:  !141-172 PositonMove ;
 144:  !143-178 Position Min-Max ;
 145:  R[51]=7    ;
 146:  FOR R[50]=141 TO 178 ;
 147:  R[R[51]]=GI[R[51]]    ;
 148:  IF (DI[R[50]]=ON) THEN ;
 149:  R[R[51]]=GI[R[51]]*(-1)    ;
 150:  ENDIF ;
 151:  R[51]=R[51]+1    ;
 152:  ENDFOR ;
 153:   ;
 154:  CALL FERRORCAMPOS    ;
 155:  !Check-Pos-Error-Succeed ;
 156:  WAIT R[59]=4    ;
 157:   ;
 158:  !Receive Camera OK ;
 159:  DO[105]=PULSE,1.0sec ;
 160:   ;
 161:  !Position Y Error ;
 162:  IF R[53]=1,JMP LBL[3] ;
 163:   ;
 164:  ENDIF ;
 165:  !END IF MEMORY ;
 166:   ;
 167:  !savepositonwaitmove PR ;
 168:  R[54]=7    ;
 169:  FOR R[55]=11 TO 18 ;
 170:  FOR R[48]=1 TO 6 ;
 171:  IF (R[48]=4 OR R[48]=5) THEN ;
 172:  PR[R[55],R[48]]=0    ;
 173:  ELSE ;
 174:  PR[R[55],R[48]]=R[R[54]]    ;
 175:  R[54]=R[54]+1    ;
 176:  ENDIF ;
 177:  ENDFOR ;
 178:  ENDFOR ;
 179:  !End Save PR ;
 180:   ;
 181:  !Send Pos Max-Min To PLC ;
 182:  //R[46]=39    ;
 183:  //FOR R[46]=39 TO 44 ;
 184:  //GO[R[46]]=R[R[46]] ;
 185:  //ENDFOR ;
 186:  !END Function Send MinMAx ;
 187:   ;
 188:  !CheckPositon WorkSpace ;
 189:   ;
 190:  GO[57]=2 ;
 191:  //WAIT DI[19]=ON    ;
 192:   ;
 193:  //!ExitBacuaseStopRun ;
 194:  //IF R[61]=1,JMP LBL[13] ;
 195:  //    ;
 196:  !WorkSpaice Error ;
 197:  //IF (DI[20]=ON) THEN ;
 198:  //MESSAGE[WorkSpaice Error] ;
 199:  //L PR[1] 2500mm/sec FINE    ;
 200:  //JMP LBL[20] ;
 201:  //ENDIF ;
 202:   ;
 203:  R[56]=11    ;
 204:  R[58]=102    ;
 205:   ;
 206:  FOR R[57]=1 TO R[3] ;
 207:   ;
 208:  !ExitBacuaseStopRun ;
 209:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
 210:   ;
 211:  !Exit Sackmain < 0 ;
 212:  IF R[81]<=0,JMP LBL[13] ;
 213:   ;
 214:  !SetTimeOffBlower ;
 215:  TIMER[1]=RESET ;
 216:  TIMER[1]=START ;
 217:   ;
 218:  !WaitBeltToTuck ;
 219:  //MESSAGE[Wait Belt Tuck] ;
 220:  GO[57]=5 ;
 221:  WAIT ((DI[7]=ON) OR (R[61]=1 OR R[89]=1))    ;
 222:   ;
 223:  !ResetTimeOffBlower ;
 224:  TIMER[1]=STOP ;
 225:  TIMER[1]=RESET ;
 226:   ;
 227:  !ExitBacuaseStopRun ;
 228:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
 229:   ;
 230:  !On Blower ;
 231:  DO[2]=ON ;
 232:   ;
 233:  !On Valve ;
 234:  CALL FONVAUL    ;
 235:  !On-Velve-Succeed ;
 236:  WAIT R[59]=5    ;
 237:   ;
 238:  !Move Position ;
 239:  //MESSAGE[RobotRunning] ;
 240:  GO[57]=3 ;
 241:  !Move To PosSelect ;
 242:L PR[4] 4000mm/sec CNT100    ;
 243:  !Move To BeforPickPos ;
 244:L PR[R[56]] 4000mm/sec CNT30 Offset,PR[20]    ;
 245:  !Move To PickPos ;
 246:L PR[R[56]] 800mm/sec FINE ACC100    ;
 247:  !WaitTimePickBag ;
 248:  WAIT R[79] ;
 249:  !IF PickBagNo ;
 250:  IF (DI[11]=ON OR DO[5]=ON) THEN ;
 251:   ;
 252:  IF (DI[8]=OFF) THEN ;
 253:  MESSAGE[MoveDownPLC_1Bag] ;
 254:  PR[19,3]=R[60]    ;
 255:L PR[R[56]] 300mm/sec FINE Offset,PR[19] ACC100    ;
 256:  WAIT    .30(sec) ;
 257:  ENDIF ;
 258:   ;
 259:  ELSE ;
 260:   ;
 261:  IF (DI[8]=OFF OR DI[9]=OFF) THEN ;
 262:  MESSAGE[MoveDownPLC_2Bag] ;
 263:  PR[19,3]=R[60]    ;
 264:L PR[R[56]] 300mm/sec FINE Offset,PR[19] ACC100    ;
 265:  WAIT    .30(sec) ;
 266:  ENDIF ;
 267:  ENDIF ;
 268:   ;
 269:  !Wait Pressure On ;
 270:  //WAIT DI[8]=ON AND DI[9]=ON    ;
 271:  !Move To AfterPickPos ;
 272:L PR[R[56]] 600mm/sec CNT30 Offset,PR[20] DB  100.0mm,CALL PICKERROR ACC100    ;
 273:  !Move To DropPOs ;
 274:L PR[4] R[93]mm/sec FINE DB  250.0mm,CALL FCOUNTER ACC R[92]    ;
 275:  !End Move ;
 276:   ;
 277:  !ClareSendDrop ;
 278:  IF (R[88]=1) THEN ;
 279:  R[84]=0    ;
 280:  R[85]=0    ;
 281:  ENDIF ;
 282:   ;
 283:  !Wait For Belt ;
 284:  //MESSAGE[WaitBeltDropBag] ;
 285:  GO[57]=4 ;
 286:  WAIT R[52]=0    ;
 287:  !End Wait For Belt ;
 288:   ;
 289:  !Drop Valve ;
 290:  DO[4]=PULSE,0.5sec ;
 291:  DO[5]=PULSE,0.5sec ;
 292:  !End Drop Valve ;
 293:   ;
 294:  !Wait For Pes 1,2 Off ;
 295:  WAIT R[80] ;
 296:  //MESSAGE[WaitPus Off] ;
 297:  WAIT DI[8]=OFF AND DI[9]=OFF    ;
 298:  !End Wait For Pes 1,2 Off ;
 299:   ;
 300:  !ExitBacuaseStopRun ;
 301:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
 302:   ;
 303:  !ExitBecuaseErrorRun ;
 304:  IF (R[88]=1 OR (R[84]=1 OR R[85]=1)) THEN ;
 305:  MESSAGE[ExitSackError] ;
 306:  CALL FRESET_MEMORY    ;
 307:  DO[17]=PULSE,1.0sec ;
 308:  JMP LBL[14] ;
 309:  ELSE ;
 310:  R[86]=0    ;
 311:  ENDIF ;
 312:   ;
 313:  R[56]=R[56]+1    ;
 314:   ;
 315:  ENDFOR ;
 316:   ;
 317:  CALL FMEMORY_POSITION    ;
 318:  WAIT R[59]=6    ;
 319:  CALL FSWITCH_LAYER    ;
 320:   ;
 321:  LBL[14] ;
 322:   ;
 323:  !PositionEsc ;
 324:L PR[4] 3000mm/sec FINE    ;
 325:   ;
 326:  IF (R[86]>=3) THEN ;
 327:  R[88]=0    ;
 328:  MESSAGE[R[86]>= 3 CountPikDrop] ;
 329:  !ExitBacuaseError  ;
 330:  CALL FRESET_MEMORY    ;
 331:  JMP LBL[17] ;
 332:  ENDIF ;
 333:   ;
 334:  !CheckErrorPick ;
 335:  IF (R[84]=1 OR R[85]=1) THEN ;
 336:  IF (DI[3]=ON) THEN ;
 337:  R[81]=GI[51]-GI[53]    ;
 338:  MESSAGE[ExitPickError Left] ;
 339:  ENDIF ;
 340:  IF (DI[13]=ON) THEN ;
 341:  R[81]=GI[52]-GI[54]    ;
 342:  MESSAGE[ExitPickError Right] ;
 343:  ENDIF ;
 344:  R[86]=R[86]+1    ;
 345:  MESSAGE[Count R[86]+1] ;
 346:  CALL FRESET_MEMORY    ;
 347:  DO[11]=PULSE,1.0sec ;
 348:  JMP LBL[20] ;
 349:  ENDIF ;
 350:   ;
 351:  IF (R[88]=1) THEN ;
 352:  MESSAGE[ExitDropError] ;
 353:  R[84]=0    ;
 354:  R[85]=0    ;
 355:  R[86]=0    ;
 356:  !ExitBacuaseError  ;
 357:  CALL FRESET_MEMORY    ;
 358:  ENDIF ;
 359:   ;
 360:  !JumpToError ;
 361:  LBL[17] ;
 362:   ;
 363:  CALL FSENDERR    ;
 364:  WAIT R[59]=8    ;
 365:   ;
 366:  !ExitBacuaseStopRun ;
 367:  IF R[61]=1 OR R[89]=1,JMP LBL[13] ;
 368:   ;
 369:  IF (R[81]=0) THEN ;
 370:  MESSAGE[ExitLoop R[81] < 1] ;
 371:  JMP LBL[13] ;
 372:  ELSE ;
 373:  MESSAGE[Continue R[81] > 0] ;
 374:  !JumpToNewStart ;
 375:  JMP LBL[20] ;
 376:  ENDIF ;
/POS
/END
